pipeline {
  agent {
    docker {
      image 'centos:my-centos'
      args '-u 0:0 --privileged'
    }
  }

  stages {
    stage("Gather Vault Tokens") {
      steps {
        script {
          env.DEV_VAULT_TOKEN = input(message: 'Insert DEV Vault Token', id: 'DEV_VAULT_TOKEN', parameters: [string(name: 'Dev Token')])
          env.STAGE_VAULT_TOKEN = input(message: 'Insert STAGE Vault Token', id: 'STAGE_VAULT_TOKEN', parameters: [string(name: 'Stage Token')])
          env.PROD_VAULT_TOKEN = input(message: 'Insert PROD Vault Token', id: 'PROD_VAULT_TOKEN', parameters: [string(name: 'Prod Token')])
          env.VAULT_SKIP_VERIFY = "true"
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        sh 'make install-dependencies'
      }
    }

    stage("Test And Deploy") {
      matrix {
        axes {
          axis {
            name 'ENV'
            values 'dev', 'stage', 'prod'
          }
        }
        stages {
          stage("Test") {
            when {
              not {
                branch 'master'
              }
            }
            steps {
              withEnv(["ENV=${ENV}"]) {
                sh "make test/checkov"
              }
            }
          }
          
          stage("Plan") {
            when {
              // When a Pull-request
              allOf {
                changeRequest target: 'master'
              }
            }
            steps {
              withEnv(["VAULT_TOKEN=${DEV_VAULT_TOKEN}", "ENV=${ENV}"]) {
                withAWS(region: 'us-east-1', credentials: 'my-aws-credentials') {
                  sh "make terraform/init"
                  sh "make terraform/plan"
                }
              }
            }
          }

          stage("Apply") {
            when {
              // When a Pull-request
              allOf {
                changeRequest target: 'master'
              }
            }
            steps {
              withEnv(["VAULT_TOKEN=${DEV_VAULT_TOKEN}", "ENV=${ENV}"]) {
                withAWS(region: 'us-east-1', credentials: 'my-aws-credentials') {
                  sh "make terraform/init"
                  sh "make terraform/plan"
                  sh "make terraform/apply"
                }
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      sh "rm -rf terraform"
    }
  }
}